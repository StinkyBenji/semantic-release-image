---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: image-build-pipeline
  annotations:
    pipelinesascode.tekton.dev/max-keep-runs: "5"
    pipelinesascode.tekton.dev/task: "[git-clone, gitleaks, hadolint]"
    pipelinesascode.tekton.dev/task-1: "[https://raw.githubusercontent.com/StinkyBenji/some-tekton/main/tasks/semantic-release.yaml]"
    pipelinesascode.tekton.dev/on-cel-expression: |
      (event == "push" || event == "pull_request") && target_branch == "main" &&
      ("Containerfile".pathChanged() || "*.json".pathChanged() || ".tekton/image-build-pipeline.yaml".pathChanged())
spec:
  serviceAccountName: pipelines-sa
  params:
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
  podTemplate:
    env:
      - name: HOME
        value: "/tekton/home"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    workspaces:
      - name: source
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)

      - name: detect-secrets
        runAfter:
          - fetch-repository
        taskRef:
          name: gitleaks
        workspaces:
          - name: source
            workspace: source
        params:
          - name: repo_path
            value: "."
          - name: config_file_url
            value: https://raw.githubusercontent.com/tektoncd/catalog/main/task/gitleaks/0.1/samples/gitleaks.toml
          - name: config_file_path
            value: gitleaks.toml
          - name: report_output_path
            value: gitleaks-report.json

      - name: dockerfile-lint
        runAfter:
          - fetch-repository
        taskRef:
          name: hadolint
        workspaces:
          - name: source
            workspace: source
        params:
          - name: dockerfile-path
            value: ./Containerfile

      - name: generate-release-version
        when:
          - input: "{{ source_branch }}"
            operator: in
            values: ["main"]
        runAfter:
          - fetch-repository
        taskRef:
          name: semantic-release
        workspaces:
          - name: source
            workspace: source
        params:
          - name: source-branch
            value: "{{ source_branch }}"
          - name: extra-args
            value: "--dry-run"

      - name: build-image
        when:
          - input: "{{ source_branch }}"
            operator: in
            values: ["main"]
        taskRef:
          name: buildah
          kind: ClusterTask
        workspaces:
          - name: source
            workspace: source
        runAfter:
          - dockerfile-lint
        params:
          - name: IMAGE
            value: "quay.io/stbenji/semantic-release:$(tasks.generate-release-version.results.version)"

      - name: git-release
        when:
          - input: "{{ source_branch }}"
            operator: in
            values: ["main"]
        runAfter:
          - build-image
        taskRef:
          name: semantic-release
        workspaces:
          - name: source
            workspace: source
        params:
          - name: source-branch
            value: "{{ source_branch }}"

  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
